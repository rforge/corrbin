undebug(multiCA.test.default)
multiCA.test.formula <- function(formula, data, subset, na.action,  weights, ...){
if (missing(formula) || (length(formula) != 3L) || (length(attr(terms(formula[-2L]),
"term.labels")) != 1L))
stop("'formula' missing or incorrect")
m <- match.call(expand.dots = FALSE)
if (is.matrix(eval(m$data, parent.frame())))
m$data <- as.data.frame(data)
m[[1L]] <- quote(stats::model.frame)
m$... <- NULL
mf <- eval(m, parent.frame())
responsevar <- attr(attr(mf, "terms"), "response")
response <- mf[[responsevar]]
weightvar <- which(names(mf)=="(weights)")
w <- if(length(weightvar) > 0)  mf[[weightvar]] else rep(1L, nrow(mf))
g <- factor(mf[,-c(responsevar, weightvar)])
x <- xtabs(w ~ response + g)
multiCA.test.default(x, ...)
}
a <- multiCA.test.formula(Type ~ Year, data=stroke, weights = Freq)
a
debug(print.htest)
debug(stats::print.htest)
debug(stats:::print.htest)
a
names(x$statistic)
undebug(stats:::print.htest)
nuweb(mc)
document(mc)
run_examples(mc)  # or dev_example("ran.CMData")
nuweb(mc)
document(mc)
run_examples(mc)  # or dev_example("ran.CMData")
nuweb(mc)
document(mc)
run_examples(mc)  # or dev_example("ran.CMData")
library(multiCA)
data(stroke)
multiCA.test(Type ~ Year, data=stroke, weights=Freq)
nuweb(mc)
run_examples(mc)  # or dev_example("ran.CMData")
document(mc)
run_examples(mc)  # or dev_example("ran.CMData")
?lm
nuweb(mc)
document(mc)
run_examples(mc)  # or dev_example("ran.CMData")
load_all(mc)
getAnywhere("t.test.formula")
nuweb(mc)
document(mc)
run_examples(mc)  # or dev_example("ran.CMData")
library(multiCA)
?multiCA.test
data(stroke)
## using formula interface
multiCA.test(Type ~ Year, weights=Freq, data=stroke)
strk.mat <- xtabs(Freq ~ Type + Year, data=stroke)
multiCA.test(strk.mat)
nuweb(mc)
library(multiCA)
data(stroke)
## using formula interface
multiCA.test(Type ~ Year, weights=Freq, data=stroke)
load_all(mc)
run_examples(mc)  # or dev_example("ran.CMData")
check(mc, cleanup = FALSE, check_dir = "c:/RForge", check_version = TRUE, cran = TRUE)
data(stroke)
a <- xtabs(Freq ~ Type + Year, data=stroke)
is.matrix(a)
nuweb(mc)
document(mc)
check(mc, cleanup = FALSE, check_dir = "c:/RForge", check_version = TRUE, cran = TRUE)
?NextMethod
nuweb(mc)
document(mc)
check(mc, cleanup = FALSE, check_dir = "c:/RForge", check_version = TRUE, cran = TRUE)
nuweb(mc)
document(mc)
library(multiCA)
example("multiCA.test")
multiCA.test.formula
check(mc, cleanup = FALSE, check_dir = "c:/RForge", check_version = TRUE, cran = TRUE)
mc <- as.package("c:/RForge/multiCA")
load_all(mc)
multiCA.test.formula
library(devtools)
source('c:/RForge/Nuweb.R')
mc <- as.package("c:/RForge/multiCA")
nuweb(mc)
document(mc)
run_examples(mc)  # or dev_example("ran.CMData")
ff <- function(){list(test=t.test(rnorm(10),rnorm(10)), y=rnorm(10))}
ff()
multiCA.test(Type ~ Year, weights=Freq, data=stroke, subset=Year<2006)
summary(stroke$Year)
multiCA.test(Type ~ Year, weights=Freq, data=stroke, scores=(1:9)^2)
multiCA.test(Type ~ Year, weights=Freq, data=stroke, outcomes = 1:3)
getAnywhere("t.test.default")
getAnywhere("print.htest")
nuweb(mc)
document(mc)
run_examples(mc)  # or dev_example("ran.CMData")
matplot(xtabs(Freq ~ Type + Year, data=stroke), type="l")
matplot(prop.table(xtabs(Freq ~ Type + Year, data=stroke), margin=1), type="l")
matplot(prop.table(xtabs(Freq ~ Type + Year, data=stroke), margin=2), type="l")
matplot(prop.table(xtabs(Freq ~ Year+Type, data=stroke), margin=2), type="l")
matplot(prop.table(xtabs(Freq ~ Year+Type, data=stroke), margin=1), type="l")
strk.props <- prop.table(xtabs(Freq ~ Year+Type, data=stroke), margin=1)
strk.props
matplot(strk.props, type="l")
mc <- as.package("c:/RForge/multiCA")
nuweb(mc)
library(multiCA)
run_examples(mc)  # or dev_example("ran.CMData")
nuweb(mc)
document(mc)
nuweb(mc)
document(mc)
nuweb(mc)
document(mc)
load_all(mc)
multiCA:::.multiCA.test
strk.mat
strk.mat <- xtabs(Freq ~ Type + Year, data=stroke)
multiCA:::.multiCA.test(strk.mat, scores=1:9, outcomes=1:5)
nuweb(mc)
document(mc)
load_all(mc)
multiCA:::.multiCA.test(strk.mat, scores=1:9, outcomes=1:5)
a <- multiCA:::.multiCA.test(strk.mat, scores=1:9, outcomes=1:5)
sqrt(a$indiv.statistics)
formatC(sqrt(a$indiv.p.value), type="f")
formatC(sqrt(a$indiv.p.value), format = "f")
*2pnorm(1.197, lower=FALSE)
2*pnorm(1.197, lower=FALSE)
pnorm(1.197, lower=FALSE)
CA.test <- function(x, scores = 1:nrow(x)){
x <- t(x)
if (dim(x)[2]!=2){stop("Cochran-Armitage test for trend must be  used with a (2,R) table",call.=FALSE) }
nidot <- apply(x,1,sum)
n <- sum(nidot)
Ri <- scores
Rbar <- sum(nidot*Ri)/n
s2 <- sum(nidot*(Ri-Rbar)^2)
pdot1 <- sum(x[,1])/n
if (pdot1==0 | pdot1==1) return(list(statistic=0, p.value=1))
Tt <- sum(x[,1]*(Ri-Rbar))/sqrt(pdot1*(1-pdot1)*s2)
p.value.uni <- 1-pnorm(abs(Tt))
p.value.bi <- 2*p.value.uni
out <- list(statistic=Tt, p.value=p.value.bi)
return(out)
}
strk.mat
s1 <- rbind(strk.mat[1,], colSums(strk.mat[-1,]))
s1
CA.test(s1)
pchisq(1.197^2, df=1, lower=FALSE)
a$indiv.statistics
a$indiv.p
formatC(a$indiv.p.value, format="f")
nuweb(mc)
document(mc)
run_examples(mc)  # or dev_example("ran.CMData")
load_all(mc)
examples("multiCA.test")
example("multiCA.test")
?uniroot
cnonct <- function(df, alpha, beta){
crit.value <- qchisq(alpha, df=df, lower.tail=FALSE)
f <- function(ncp){pchisq(crit.value, df=df, ncp=ncp) - beta}
res <- uniroot(f, interval=c(0, 100), extendInt="upX")
res$value
}
cnonct(3, 0.05, 0.2)
debug(cnonct)
cnonct(3, 0.05, 0.2)
pchisq(crit.value, df=3, ncp=0)
pchisq(crit.value, df=3, ncp=10)
pchisq(crit.value, df=3, ncp=100)
f(0)
f(100)
cnonct(3, 0.05, 0.2)
uniroot(f, interval=c(0, 100))
uniroot(f, interval=c(0, 100), extendInt="up", trace=1)
uniroot(f, interval=c(0, 100), extendInt="up", trace=2)
uniroot(f, interval=c(0, 100), extendInt="up", trace=2, maxiter=10)
f(0)
f(-0.1)
cnonct <- function(df, alpha, beta){
crit.value <- qchisq(alpha, df=df, lower.tail=FALSE)
f <- function(ncp){pchisq(crit.value, df=df, ncp=pmax(0,ncp)) - beta}
res <- uniroot(f, interval=c(0, 100), extendInt="upX")
res$value
}
cnonct(3, 0.05, 0.2)
debug(cnonct)
cnonct(3, 0.05, 0.2)
f(-0.1)
uniroot(f, interval = c(0, 100), extendInt = "upX", trace=2, maxiter=10)
uniroot(f, interval = c(0, 100), extendInt = "downX", trace=2, maxiter=10)
cnonct <- function(df, alpha, beta){
crit.value <- qchisq(alpha, df=df, lower.tail=FALSE)
f <- function(ncp){pchisq(crit.value, df=df, ncp=pmax(0,ncp)) - beta}
res <- uniroot(f, interval=c(0, 100), extendInt="downX")
res$value
}
cnonct(3, 0.05, 0.2)
cnonct <- function(df, alpha, beta){
crit.value <- qchisq(alpha, df=df, lower.tail=FALSE)
f <- function(ncp){pchisq(crit.value, df=df, ncp=pmax(0,ncp)) - beta}
res <- uniroot(f, interval=c(0, 100), extendInt="downX")
res$root
}
cnonct(3, 0.05, 0.2)
cnonct(50, 0.05, 0.1)
cnonct(100, 0.05, 0.1)
cnonct(1000, 0.05, 0.1)
library(devtools)
source('c:/RForge/Nuweb.R')
mc <- as.package("c:/RForge/multiCA")
nuweb(mc)
document(mc)
nuweb(mc)
document(mc)
run_examples(mc)  # or dev_example("ran.CMData")
load_all(mc)
example(cnonct)
example("cnonct")
check(mc, cleanup = FALSE, check_dir = "c:/RForge", check_version = TRUE, cran = TRUE)
?p.adjust
f <- function(a=c('a','b')){if(missing(a)) return('c') else return(a)}
f()
f <- function(a=c('a','b')){if(missing(a)) return('c') else return(match.arg(a))}
f()
f('a')
f('c')
nuweb(mc)
nuweb(mc)
document(mc)
nuweb(mc)
document(mc)
nuweb(mc)
nuweb(mc)
document(mc)
bitops::bitAnd
nuweb(mc)
document(mc)
run_examples(mc)  # or dev_example("ran.CMData")
nuweb(mc)
document(mc)
run_examples(mc)  # or dev_example("ran.CMData")
load_all(mc)
run_examples(mc)  # or dev_example("ran.CMData")
detach(package:multiCA)
check(mc, cleanup = FALSE, check_dir = "c:/RForge", check_version = TRUE, cran = TRUE)
nuweb(mc)
document(mc)
nuweb(mc)
document(mc)
run_examples(mc)  # or dev_example("ran.CMData")
load_all(mc)
run_examples(mc)  # or dev_example("ran.CMData")
check(mc, cleanup = FALSE, check_dir = "c:/RForge", check_version = TRUE, cran = TRUE)
getwd()
check(mc, cleanup = FALSE, check_dir = "c:/RForge", check_version = TRUE, cran = TRUE)
load_all(mc)
run_examples(mc)  # or dev_example("ran.CMData")
library(bitops)
run_examples(mc)  # or dev_example("ran.CMData")
debug(multiCA.test)
undebug(multiCA.test)
undebug(multiCA.test.default)
debug(multiCA.test.default)
strk.mat <- xtabs(Freq ~ Type + Year, data=stroke)
multiCA.test(strk.mat, outcomes=1:3)
res
mytest(1:3)
.multiCA.test(x, scores, 1:3)
mytest <- function(hypotheses){
.multiCA.test(x, scores, hypotheses)$indiv.p.value
}
mytest(1:3)
nuweb(mc)
document(mc)
nuweb(mc)
document(mc)
run_examples(mc)  # or dev_example("ran.CMData")
load_all(mc)
multiCA.test(strk.mat, outcomes=1:3)
multiCA.test(strk.mat, outcomes=1:3, p.adjust="none")
multiCA.test(strk.mat, outcomes=1:3, p.adjust="holm")
p0 <- multiCA.test(strk.mat, outcomes=1:3, p.adjust="none")$individual
p-
p0
p.adjust(p0)
p0 <- multiCA.test(strk.mat, p.adjust="none")$individual
p0
multiCA.test(strk.mat, p.adjust="holm")
p.adjust(p0, method="holm")
multiCA.test(strk.mat, p.adjust="closed")
warnings()
debug(.p.adjust.closed)
multiCA.test(strk.mat, p.adjust="closed")
localtest
nuweb(mc)
document(mc)
run_examples(mc)  # or dev_example("ran.CMData")
load_all(mc)
multiCA.test(strk.mat, p.adjust="closed")
multiCA.test(strk.mat, p.adjust="holm")
library(multiCA)
30*75+10*125
x <- rnorm(10); y <- 1 + 2*x
lm(y~x)
lm(y~x, weights=1:10)
?t.test
?power.t.test
?weighted.mean
power.t.test
?pnorm
cnonct <- function(x, p, df){
f <- function(ncp){pchisq(x, df=df, ncp=pmax(0,ncp)) - p}
res <- uniroot(f, interval=c(0, 100), extendInt="downX")
res$root
}
cnonct(6, 10, 0.8)
cnonct(6, 0.8, 10)
cnonct(qchisq(0.95, df=10), 0.8, 10)
cnonct(qchisq(0.95, df=10), 0.95, 10)
cnonct <- function(x, p, df){
if (pchisq(x, df=df) < p) return(NA)
f <- function(ncp){pchisq(x, df=df, ncp=pmax(0,ncp)) - p}
res <- uniroot(f, interval=c(0, 100), extendInt="downX")
res$root
}
cnonct(qchisq(0.95, df=10), 0.95, 10)
cnonct(qchisq(0.8, df=10), 0.95, 10)
formals(cnonct)
print.htest.power
methods(class="htest.power")
methods(class="power.htest")
getAnywhere("print.power.htest")
power.t.test
?equal
?all.equal
all.equal(c(1,1,1), 1)
nuweb(mc)
document(mc)
nuweb(mc)
document(mc)
load_all(mc)
run_examples(mc)  # or dev_example("ran.CMData")
power.multiCA.test(N=100, p.start=c(0.1, 0.5, 0.4), p.end=c(0.4, 0.2, 0.4))
power.multiCA.test(N=100, p.start=c(0.1, 0.5, 0.4), p.end=c(0.4, 0.2, 0.4), G=4)
power.multiCA.test
debug(power.multiCA.test)
power.multiCA.test(N=100, p.start=c(0.1, 0.5, 0.4), p.end=c(0.4, 0.2, 0.4), G=4)
nuweb(mc)
document(mc)
load_all(mc)
power.multiCA.test(N=100, p.start=c(0.1, 0.5, 0.4), p.end=c(0.4, 0.2, 0.4), G=4)
nuweb(mc)
document(mc)
load_all(mc)
power.multiCA.test(N=100, p.start=c(0.1, 0.5, 0.4), p.end=c(0.4, 0.2, 0.4), G=4)
debug(power.multiCA.test)
power.multiCA.test(N=100, p.start=c(0.1, 0.5, 0.4), p.end=c(0.4, 0.2, 0.4), G=4)
K
slopes <- (p.end - p.start) / (scores[G] - scores[1])
outer(1:5, 1:3, function(i,j) i+2*j)
nuweb(mc)
document(mc)
load_all(mc)
power.multiCA.test(N=100, p.start=c(0.1, 0.5, 0.4), p.end=c(0.4, 0.2, 0.4), G=4)
debug(power.multiCA.test)
power.multiCA.test(N=100, p.start=c(0.1, 0.5, 0.4), p.end=c(0.4, 0.2, 0.4), G=4)
power.multiCA.test(N=100, p.start=c(0.1, 0.5, 0.4), p.end=c(0.4, 0.2, 0.4), G=4)
outer(1:K, 1:G, function(j,i)p.ave[j] + slopes[j]*(scores[i]-cbar))
p.ave[2] + slopes[2] * (scores[1]-cbar)
p.ave
p.ave <- p.start - slopes * (scores - cbar)
p.ave <- p.start - slopes * (scores[1] - cbar)
p.ave
outer(1:K, 1:G, function(j,i)p.ave[j] + slopes[j]*(scores[i]-cbar))
nuweb(mc)
document(mc)
load_all(mc)
power.multiCA.test(N=100, p.start=c(0.1, 0.5, 0.4), p.end=c(0.4, 0.2, 0.4), G=4)
power.multiCA.test(N=10, p.start=c(0.1, 0.5, 0.4), p.end=c(0.4, 0.2, 0.4), G=4)
nuweb(mc)
document(mc)
load_all(mc)
power.multiCA.test(N=10, p.start=c(0.1, 0.5, 0.4), p.end=c(0.4, 0.2, 0.4), G=4)
power.multiCA.test(N=100, p.start=c(0.1, 0.5, 0.4), p.end=c(0.4, 0.2, 0.4), G=4)
strk.mat
power.multiCA.test(N=100, pmatrix=strk.mat)
debug(power.multiCA.test)
power.multiCA.test(N=100, pmatrix=strk.mat)
all.equal(colSums(pmatrix), rep(1, G))
?all.equal
isTRUE(all.equal(colSums(pmatrix), rep(1, G)))
isTRUE(all.equal(colSums(prop.matrix(pmatrix, margin=2)), rep(1, G)))
isTRUE(all.equal(colSums(prop.table(pmatrix, margin=2)), rep(1, G)))
all.equal(colSums(prop.table(pmatrix, margin=2)), rep(1, G))
all.equal(colSums(prop.table(pmatrix, margin=2)), rep(1, G), check.attributes=FALSE)
all.equal(colSums(prop.table(pmatrix, margin=2)), rep(1, G), check.attributes=FALSE, use.names=FALSE)
sample(1:5, prob = 1:5)
sample
sample.int
all.equal(sum(1:5), 10)
nuweb(mc)
document(mc)
nuweb(mc)
document(mc)
load_all(mc)
power.multiCA.test(N=100, pmatrix=strk.mat)
power.multiCA.test(N=100, pmatrix=prop.table(strk.mat, 2))
debug(power.multiCA.test)
power.multiCA.test(N=100, pmatrix=strk.mat)
G
nuweb(mc)
document(mc)
load_all(mc)
power.multiCA.test(N=100, pmatrix=strk.mat)
power.multiCA.test(N=100, pmatrix=prop.table(strk.mat, 2))
power.multiCA.test(N=sum(str.mat), pmatrix=prop.table(strk.mat, 2))
power.multiCA.test(N=sum(strk.mat), pmatrix=prop.table(strk.mat, 2))
power.multiCA.test(power=0.8, pmatrix=prop.table(strk.mat, 2))
power.multiCA.test(N=500, pmatrix=prop.table(strk.mat, 2))
power.multiCA.test(N=600, pmatrix=prop.table(strk.mat, 2))
power.multiCA.test(N=1000, pmatrix=prop.table(strk.mat, 2))
debug(power.multiCA.test)
power.multiCA.test(power=0.8, pmatrix=prop.table(strk.mat, 2))
ncp*s2
cnonct(crit, p = power, df = df)
sum(slopes^2/p.ave)
ncp/(sum(slopes^2/p.ave)*s2)
nuweb(mc)
load_all(mc)
power.multiCA.test(power=0.8, pmatrix=prop.table(strk.mat, 2))
power.multiCA.test(N=841, pmatrix=prop.table(strk.mat, 2))
power.multiCA.test(N=841, pmatrix=prop.table(strk.mat, 2), n.prop=colSums(strk.mat))
power.multiCA.test(power=0.8, pmatrix=prop.table(strk.mat, 2), n.prop=colSums(strk.mat))
power.multiCA.test(power=0.8, pstart=c(0.1, 0.2, 0.3, 0.4), slopes=c(0.1, -0.1, 0.1, -0.1))
power.multiCA.test(power=0.8, p.start=c(0.1, 0.2, 0.3, 0.4), slopes=c(0.1, -0.1, 0.1, -0.1))
power.multiCA.test(power=0.8, p.start=c(0.1, 0.2, 0.3, 0.4), slopes=c(0.1, -0.1, 0.1, -0.1), G=3)
power.multiCA.test(power=0.8, p.start=c(0.1, 0.2, 0.3, 0.4), slopes=c(0.1, -0.1, 0.1, -0.1), G=5)
power.multiCA.test(power=0.8, p.start=c(0.1, 0.2, 0.3, 0.4), slopes=c(0.05, -0.1, 0.1, -0.1), G=5)
power.multiCA.test(power=0.8, p.start=c(0.1, 0.2, 0.3, 0.4), slopes=c(0.05, -0.05, 0.1, -0.1), G=5)
power.multiCA.test(power=0.8, p.start=c(0.1, 0.2, 0.3, 0.4), slopes=c(0.05, -0.05, 0.1, -0.1), G=5, n.prop=c(1,2,3,2,1))
nuweb(mc)
load_all(mc)
power.multiCA.test(power=0.8, p.start=c(0.1, 0.2, 0.3, 0.4), slopes=c(0.1, -0.1, 0.1, -0.1))
debug(power.multiCA.test)
power.multiCA.test(power=0.8, p.start=c(0.1, 0.2, 0.3, 0.4), slopes=c(0.1, -0.1, 0.1, -0.1))
nuweb(mc)
load_all(mc)
power.multiCA.test(power=0.8, p.start=c(0.1, 0.2, 0.3, 0.4), slopes=c(0.1, -0.1, 0.1, -0.1))
power.multiCA.test(power=0.8, p.start=c(0.1, 0.2, 0.3, 0.4), slopes=c(0.1, -0.1, 0.1, -0.1), n.prop=c(1,4,1))
debug(power.multiCA.test)
power.multiCA.test(power=0.8, p.start=c(0.1, 0.2, 0.3, 0.4), slopes=c(0.1, -0.1, 0.1, -0.1), n.prop=c(1,4,1))
is.null(G)
is.null(n.prop)
power.multiCA.test(power=0.8, p.start=c(0.1, 0.2, 0.3, 0.4), slopes=c(0.1, -0.1, 0.1, -0.1), n.prop=c(1,4,1))
is.null(G) & !is.null(scores)
length(p.ave)
p.ave
nuweb(mc)
load_all(mc)
power.multiCA.test(power=0.8, p.start=c(0.1, 0.2, 0.3, 0.4), slopes=c(0.1, -0.1, 0.1, -0.1), n.prop=c(1,4,1))
?missing
(
load_all(mc)
nuweb(mc)
load_all(mc)
power.multiCA.test(power=0.8, p.start=c(0.1, 0.2, 0.3, 0.4), slopes=c(0.1, -0.1, 0.1, -0.1), n.prop=c(1,4,1))
power.multiCA.test(power=0.8, p.start=c(0.1, 0.2, 0.3, 0.4), slopes=c(0.1, -0.1, 0.1, -0.1))
power.multiCA.test(power=0.8, p.start=c(0.1, 0.2, 0.3, 0.4), p.end=c(0.2,0.1,0.4,0.3))
power.multiCA.test(power=0.8, p.start=c(0.1, 0.2, 0.3, 0.4), p.end=c(0.2,0.1,0.4,0.3), scores=c(0,1,4,9))
power.multiCA.test(power=0.8, p.start=c(0.1, 0.2, 0.3, 0.4), p.end=c(0.2,0.1,0.4,0.3), G=10)
debug(power.multiCA.test)
power.multiCA.test(power=0.8, p.start=c(0.1, 0.2, 0.3, 0.4), p.end=c(0.2,0.1,0.4,0.3), G=10)
missing(G) & !missing(scores)
missing(G) & !missing(n.prop)
nuweb(mc)
load_all(mc)
power.multiCA.test(power=0.8, p.start=c(0.1, 0.2, 0.3, 0.4), p.end=c(0.2,0.1,0.4,0.3), G=10)
power.multiCA.test(power=0.8, p.start=c(0.1, 0.2, 0.3, 0.4), p.end=c(0.2,0.1,0.4,0.3), G=5)
power.multiCA.test(power=0.8, p.start=c(0.1, 0.2, 0.3, 0.4), slopes=c(0.2,0.1,0.4,0.3), G=5)
power.multiCA.test(power=0.8, p.start=c(0.1, 0.2, 0.3, 0.4), slopes=c(0.02,0.01,-0.02,0.01), G=5)
power.multiCA.test(power=0.8, p.start=c(0.1, 0.2, 0.3, 0.4), slopes=c(0.02,0.01,-0.02,-0.01), G=5)
nuweb(mc)
document(mc)
(ncp <- cnonct(qchisq(0.95, df=10), 0.8, df=10))
pchisq(qchisq(0.95, df=10), df=10, ncp=ncp)
nuweb(mc)
document(mc)
run_examples(mc)  # or dev_example("ran.CMData")
nuweb(mc)
document(mc)
run_examples(mc)  # or dev_example("ran.CMData")
load_all(mc)
check(mc, cleanup = FALSE, check_dir = "c:/RForge", check_version = TRUE, cran = TRUE)
nuweb(mc)
document(mc)
run_examples(mc)  # or dev_example("ran.CMData")
load_all(mc)
nuweb(mc)
document(mc)
run_examples(mc)  # or dev_example("ran.CMData")
check(mc, cleanup = FALSE, check_dir = "c:/RForge", check_version = TRUE, cran = TRUE)
