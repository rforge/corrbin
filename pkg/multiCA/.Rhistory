?chisq.test
methods("chisq.test")
methods(generic.function = "chisq.test")
chisq.test
?htest
print.htest
methods("print", "htest")
stats:::print.htest
a <- t.test(1:10, rnorm(10))
a$.data <- 1:10
a
methods(class="htest")
methods(class="pairwise.htest")
?methods
getS3method("print.pairwise.htest")
getAnywhere("print.pairwise.htest")
?p.adjust
?lm
?summary
getAnywhere("t.test")
getAnywhere("t.test.default")
?is.matrix
?t.test
library(devtools)
source('c:/RForge/Nuweb.R')
mc <- as.package("c:/RForge/multiCA")
nuweb(mc)
document(mc)
nuweb(mc)
nuweb(mc)
source('c:/RForge/Nuweb.R')
nuweb(mc)
document(mc)
run_examples(mc)  # or dev_example("ran.CMData")
nuweb(mc)
document(mc)
strk <- data.matrix(read.delim("z:/EOGeorge/MultiTrend/StrokeData.txt", row.names=1))
strk
colnames(strk) <- gsub("X", "", colnames(strk))
strk.data <- as.data.frame.table(strk)
strk.data
names(strk.data) <- c("Type", "Year", "Freq")
strk.data$Year <- as.numeric(as.character(strk.data$Year))
strk.data
str(strk.data)
use_data(strk.data, pkg=mc)
?prompt
promptData(strk.data)
stroke <- as.data.frame.table(strk)
names(stroke) <- c("Type", "Year", "Freq")
stroke$Year <- as.numeric(as.character(stroke$Year))
use_data(stroke, pkg=mc)
xtabs(Freq ~ Type + Year, data=stroke)
getAnywhere("t.test.formula")
?t.test
multiCA.test.formula <- function(formula, data, subset, na.action,  weights, ...){
if (missing(formula) || (length(formula) != 3L) || (length(attr(terms(formula[-2L]),
"term.labels")) != 1L))
stop("'formula' missing or incorrect")
m <- match.call(expand.dots = FALSE)
if (is.matrix(eval(m$data, parent.frame())))
m$data <- as.data.frame(data)
m[[1L]] <- quote(stats::model.frame)
m$... <- NULL
mf <- eval(m, parent.frame())
names(mf) <- NULL
response <- attr(attr(mf, "terms"), "response")
g <- factor(mf[[-response]])
}
head(stroke)
debug(multiCA.test.formula)
multiCA.test.formula(Type ~ Year, data=stroke, weights = Freq)
m
m
head(mf)
str(mf)
attr(attr(mf, "terms"), "response")
xtabs(`(weights)`~Type + Year, data=mf)
?model.frame
a <- ordered(gl92,3)
a <- ordered(gl(2,3))
a
factor(a)
multiCA.test.formula <- function(formula, data, subset, na.action,  weights, ...){
if (missing(formula) || (length(formula) != 3L) || (length(attr(terms(formula[-2L]),
"term.labels")) != 1L))
stop("'formula' missing or incorrect")
m <- match.call(expand.dots = FALSE)
if (is.matrix(eval(m$data, parent.frame())))
m$data <- as.data.frame(data)
m[[1L]] <- quote(stats::model.frame)
m$... <- NULL
mf <- eval(m, parent.frame())
responsevar <- attr(attr(mf, "terms"), "response")
response <- mf[[responsevar]]
weightvar <- which(names(mf)=="(weights)")
weight <- if(is.null(weightvar)) rep(1L, nrow(mf)) else mf[[weightvar]]
g <- factor(mf[[-c(responsevar, weightvar)]])
x <- xtabs(weight ~ response + g)
multiCA.test.default(x, ...)
}
multiCA.test.formula(Type ~ Year, data=stroke, weights = Freq)
debug(multiCA.test.formula)
multiCA.test.formula(Type ~ Year, data=stroke, weights = Freq)
weightvar
mf[[-c(responsevar, weightvar)]]
c(responsevar, weightvar)
head(mf[[2]])
head(mf[[-c(1,3)]])
head(mf[[-c(1)]])
head(mf)
head(mf[,-c(1,3)])
head(mf[[1]])
head(mf[,1])
which(names(mf)="a")
which(names(mf)=="a")
is.null(which(names(mf)=="a"))
multiCA.test.formula <- function(formula, data, subset, na.action,  weights, ...){
if (missing(formula) || (length(formula) != 3L) || (length(attr(terms(formula[-2L]),
"term.labels")) != 1L))
stop("'formula' missing or incorrect")
m <- match.call(expand.dots = FALSE)
if (is.matrix(eval(m$data, parent.frame())))
m$data <- as.data.frame(data)
m[[1L]] <- quote(stats::model.frame)
m$... <- NULL
mf <- eval(m, parent.frame())
responsevar <- attr(attr(mf, "terms"), "response")
response <- mf[[responsevar]]
weightvar <- which(names(mf)=="(weights)")
w <- if(length(weightvar) > 0) rep(1L, nrow(mf)) else mf[[weightvar]]
g <- factor(mf[,-c(responsevar, weightvar)])
x <- xtabs(w ~ response + g)
multiCA.test.default(x, ...)
}
multiCA.test.formula(Type ~ Year, data=stroke, weights = Freq)
a <- multiCA.test.formula(Type ~ Year, data=stroke, weights = Freq)
str(a)
debug(multiCA.test.default)
a <- multiCA.test.formula(Type ~ Year, data=stroke, weights = Freq)
x
str(x)
undebug(multiCA.test.default)
multiCA.test.formula <- function(formula, data, subset, na.action,  weights, ...){
if (missing(formula) || (length(formula) != 3L) || (length(attr(terms(formula[-2L]),
"term.labels")) != 1L))
stop("'formula' missing or incorrect")
m <- match.call(expand.dots = FALSE)
if (is.matrix(eval(m$data, parent.frame())))
m$data <- as.data.frame(data)
m[[1L]] <- quote(stats::model.frame)
m$... <- NULL
mf <- eval(m, parent.frame())
responsevar <- attr(attr(mf, "terms"), "response")
response <- mf[[responsevar]]
weightvar <- which(names(mf)=="(weights)")
w <- if(length(weightvar) > 0)  mf[[weightvar]] else rep(1L, nrow(mf))
g <- factor(mf[,-c(responsevar, weightvar)])
x <- xtabs(w ~ response + g)
multiCA.test.default(x, ...)
}
a <- multiCA.test.formula(Type ~ Year, data=stroke, weights = Freq)
a
debug(print.htest)
debug(stats::print.htest)
debug(stats:::print.htest)
a
names(x$statistic)
undebug(stats:::print.htest)
nuweb(mc)
document(mc)
run_examples(mc)  # or dev_example("ran.CMData")
nuweb(mc)
document(mc)
run_examples(mc)  # or dev_example("ran.CMData")
nuweb(mc)
document(mc)
run_examples(mc)  # or dev_example("ran.CMData")
library(multiCA)
data(stroke)
multiCA.test(Type ~ Year, data=stroke, weights=Freq)
nuweb(mc)
run_examples(mc)  # or dev_example("ran.CMData")
document(mc)
run_examples(mc)  # or dev_example("ran.CMData")
?lm
nuweb(mc)
document(mc)
run_examples(mc)  # or dev_example("ran.CMData")
load_all(mc)
getAnywhere("t.test.formula")
nuweb(mc)
document(mc)
run_examples(mc)  # or dev_example("ran.CMData")
library(multiCA)
?multiCA.test
data(stroke)
## using formula interface
multiCA.test(Type ~ Year, weights=Freq, data=stroke)
strk.mat <- xtabs(Freq ~ Type + Year, data=stroke)
multiCA.test(strk.mat)
nuweb(mc)
library(multiCA)
data(stroke)
## using formula interface
multiCA.test(Type ~ Year, weights=Freq, data=stroke)
load_all(mc)
run_examples(mc)  # or dev_example("ran.CMData")
check(mc, cleanup = FALSE, check_dir = "c:/RForge", check_version = TRUE, cran = TRUE)
data(stroke)
a <- xtabs(Freq ~ Type + Year, data=stroke)
is.matrix(a)
nuweb(mc)
document(mc)
check(mc, cleanup = FALSE, check_dir = "c:/RForge", check_version = TRUE, cran = TRUE)
?NextMethod
nuweb(mc)
document(mc)
check(mc, cleanup = FALSE, check_dir = "c:/RForge", check_version = TRUE, cran = TRUE)
nuweb(mc)
document(mc)
library(multiCA)
example("multiCA.test")
multiCA.test.formula
check(mc, cleanup = FALSE, check_dir = "c:/RForge", check_version = TRUE, cran = TRUE)
mc <- as.package("c:/RForge/multiCA")
load_all(mc)
multiCA.test.formula
library(devtools)
source('c:/RForge/Nuweb.R')
mc <- as.package("c:/RForge/multiCA")
nuweb(mc)
document(mc)
run_examples(mc)  # or dev_example("ran.CMData")
ff <- function(){list(test=t.test(rnorm(10),rnorm(10)), y=rnorm(10))}
ff()
multiCA.test(Type ~ Year, weights=Freq, data=stroke, subset=Year<2006)
summary(stroke$Year)
multiCA.test(Type ~ Year, weights=Freq, data=stroke, scores=(1:9)^2)
multiCA.test(Type ~ Year, weights=Freq, data=stroke, outcomes = 1:3)
getAnywhere("t.test.default")
getAnywhere("print.htest")
nuweb(mc)
document(mc)
run_examples(mc)  # or dev_example("ran.CMData")
matplot(xtabs(Freq ~ Type + Year, data=stroke), type="l")
matplot(prop.table(xtabs(Freq ~ Type + Year, data=stroke), margin=1), type="l")
matplot(prop.table(xtabs(Freq ~ Type + Year, data=stroke), margin=2), type="l")
matplot(prop.table(xtabs(Freq ~ Year+Type, data=stroke), margin=2), type="l")
matplot(prop.table(xtabs(Freq ~ Year+Type, data=stroke), margin=1), type="l")
strk.props <- prop.table(xtabs(Freq ~ Year+Type, data=stroke), margin=1)
strk.props
matplot(strk.props, type="l")
mc <- as.package("c:/RForge/multiCA")
nuweb(mc)
library(multiCA)
run_examples(mc)  # or dev_example("ran.CMData")
nuweb(mc)
document(mc)
nuweb(mc)
document(mc)
nuweb(mc)
document(mc)
load_all(mc)
multiCA:::.multiCA.test
strk.mat
strk.mat <- xtabs(Freq ~ Type + Year, data=stroke)
multiCA:::.multiCA.test(strk.mat, scores=1:9, outcomes=1:5)
nuweb(mc)
document(mc)
load_all(mc)
multiCA:::.multiCA.test(strk.mat, scores=1:9, outcomes=1:5)
a <- multiCA:::.multiCA.test(strk.mat, scores=1:9, outcomes=1:5)
sqrt(a$indiv.statistics)
formatC(sqrt(a$indiv.p.value), type="f")
formatC(sqrt(a$indiv.p.value), format = "f")
*2pnorm(1.197, lower=FALSE)
2*pnorm(1.197, lower=FALSE)
pnorm(1.197, lower=FALSE)
CA.test <- function(x, scores = 1:nrow(x)){
x <- t(x)
if (dim(x)[2]!=2){stop("Cochran-Armitage test for trend must be  used with a (2,R) table",call.=FALSE) }
nidot <- apply(x,1,sum)
n <- sum(nidot)
Ri <- scores
Rbar <- sum(nidot*Ri)/n
s2 <- sum(nidot*(Ri-Rbar)^2)
pdot1 <- sum(x[,1])/n
if (pdot1==0 | pdot1==1) return(list(statistic=0, p.value=1))
Tt <- sum(x[,1]*(Ri-Rbar))/sqrt(pdot1*(1-pdot1)*s2)
p.value.uni <- 1-pnorm(abs(Tt))
p.value.bi <- 2*p.value.uni
out <- list(statistic=Tt, p.value=p.value.bi)
return(out)
}
strk.mat
s1 <- rbind(strk.mat[1,], colSums(strk.mat[-1,]))
s1
CA.test(s1)
pchisq(1.197^2, df=1, lower=FALSE)
a$indiv.statistics
a$indiv.p
formatC(a$indiv.p.value, format="f")
nuweb(mc)
document(mc)
run_examples(mc)  # or dev_example("ran.CMData")
load_all(mc)
examples("multiCA.test")
example("multiCA.test")
