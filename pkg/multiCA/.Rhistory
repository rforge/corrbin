}
simmany <- function(ncp, n){
tmp <- replicate(R, tryCatch(simone(ncp, n), error=function(e)c(ncp,n,NA,NA)))
rowMeans(tmp, na.rm=TRUE)
}
res <- mapply(simmany, rep(ncp.vec, each=length(ss.vec)), rep(ss.vec, length(ncp.vec)))
resd <- as.data.frame(t(res))
names(resd) <- c("ncp", "n", "power.calc", "power")
resd$K <- K
resd <- transform(resd, se = sqrt(power * (1-power)/R))
resd
}
s3a <- sim.set(ncp.vec=0, ss.vec=seq(10, 100, by=5), K=3, nc=5, ngrid=21, R=5)
undebug(simulate.test)
s3a <- sim.set(ncp.vec=0, ss.vec=seq(10, 100, by=5), K=3, nc=5, ngrid=21, R=5)
a3a
s3a
s3b <- sim.set(ncp.vec=target.ncp3, ss.vec=c(20, 50, 100), K=3, nc=5, ngrid=21, R=5)
simulate.test <- function(nvec, pmat, sig.level=0.05){
x <- gen.data(nvec=nvec, pmat=pmat)
xres <- multiCA.test(x)$overall
pval <- xres$p.value
res <- (pval <= sig.level)
invisible(list(result=res, p.values=pval))
}
# generate a new random matrix for every simulation
# all combinations of ncp and per-group sample size
sim.set <- function(ncp.vec, ss.vec, K, nc, R=1000, ngrid=21, maxit=100) {
simone <-  function(ncp, n){
nvec <- rep(n, nc)
testp <- ran.pmatrix.ncp(ncp=ncp, K=K, nc=nc, nvec=nvec, ngrid=ngrid,
maxit=maxit)
sig <- simulate.test(nvec=nvec, pmat=testp)$res
calcpwr <- power.multiCA.test(N=sum(nvec), pmatrix=testp)$power
c(ncp, n, calcpwr, sig)
}
simmany <- function(ncp, n){
tmp <- replicate(R, tryCatch(simone(ncp, n), error=function(e)c(ncp,n,NA,NA)))
rowMeans(tmp, na.rm=TRUE)
}
res <- mapply(simmany, rep(ncp.vec, each=length(ss.vec)), rep(ss.vec, length(ncp.vec)))
resd <- as.data.frame(t(res))
names(resd) <- c("ncp", "n", "power.calc", "power")
resd$K <- K
resd <- transform(resd, se = sqrt(power * (1-power)/R))
resd
}
s3a <- sim.set(ncp.vec=0, ss.vec=seq(10, 100, by=5), K=3, nc=5, ngrid=21, R=5000)
head(s3a)
s3b <- sim.set(ncp.vec=target.ncp3, ss.vec=c(20, 50, 100), K=3, nc=5, ngrid=21, R=5)
head(s3b)
simulate.test.indiv <- function(nvec, pmat, H0s, sig.level=0.05,
adj.method1 = "Holm-Shaffer",
adj.method2 = "closed.set"){
x <- gen.data(nvec=nvec, pmat=pmat)
xres1 <- multiCA.test(x, p.adjust.method = adj.method1)$individual
xres2 <- multiCA.test(x, p.adjust.method = adj.method2)$individual
n1 <- sum(xres1[-H0s] <= sig.level)
n2 <- sum(xres2[-H0s] <= sig.level)
nsig <- c(n1, n2)
diff21 <- n2 - n1
H0sig <- c(any(xres1[H0s] <= sig.level), any(xres2[H0s] <= sig.level))
c(H0sig, nsig, diff21)
}
# generate matrices with given ncp and L constant rows
# generate new random matrix for every data set
sim.set.indiv <- function(ncp.vec, K, L, nc, nvec, R=1000, ngrid=21, maxit=100, overall.ncp=TRUE) {
simone <- function(ncp){
testp <- ran.pmatrix0.ncp(ncp=ncp, K=K, nc=nc, nvec=nvec, L=L, ngrid=ngrid,
maxit=maxit, overall.ncp=overall.ncp)
p.alt.sum <- sum(testp[(L+1):K, 1])
ncp0 <- ncp * p.alt.sum
r <- sim.test.indiv(nvec=nvec, pmat=testp, H0s=1:L)
c(ncp, ncp0, r)
}
simmany <- function(ncp){
tmp <- replicate(R, tryCatch(simone(ncp), error=function(e)c(ncp, rep(NA,6))))
avetmp <- rowMeans(tmp, na.rm=TRUE)
avetmp[8] <- sd(tmp[7,])/sqrt(R)  # se21 = sd(diff21)/sqrt(n)
avetmp
}
res <- sapply(ncp.vec, function(ncp){simmany(ncp)})
resd <- as.data.frame( t(res))
names(resd) <- c("ncp","ncp0", "H0sig1", "H0sig2","nsig1", "nsig2", "diff21", "se21")
resd$K <- K
resd$L <- L
resd
}
r3 <- sim.set.indiv(ncp.vec=0:30, K=3, nc=5, nvec=rep(100, 5), ngrid=21,
R=5, L=1)
r3
debug(sim.set.indiv)
r3 <- sim.set.indiv(ncp.vec=0:30, K=3, nc=5, nvec=rep(100, 5), ngrid=21,
R=5, L=1)
debug(simone)
simone(0)
sim.set.indiv <- function(ncp.vec, K, L, nc, nvec, R=1000, ngrid=21, maxit=100, overall.ncp=TRUE) {
simone <- function(ncp){
testp <- ran.pmatrix0.ncp(ncp=ncp, K=K, nc=nc, nvec=nvec, L=L, ngrid=ngrid,
maxit=maxit, overall.ncp=overall.ncp)
p.alt.sum <- sum(testp[(L+1):K, 1])
ncp0 <- ncp * p.alt.sum
r <- simulate.test.indiv(nvec=nvec, pmat=testp, H0s=1:L)
c(ncp, ncp0, r)
}
simmany <- function(ncp){
tmp <- replicate(R, tryCatch(simone(ncp), error=function(e)c(ncp, rep(NA,6))))
avetmp <- rowMeans(tmp, na.rm=TRUE)
avetmp[8] <- sd(tmp[7,])/sqrt(R)  # se21 = sd(diff21)/sqrt(n)
avetmp
}
res <- sapply(ncp.vec, function(ncp){simmany(ncp)})
resd <- as.data.frame( t(res))
names(resd) <- c("ncp","ncp0", "H0sig1", "H0sig2","nsig1", "nsig2", "diff21", "se21")
resd$K <- K
resd$L <- L
resd
}
r3 <- sim.set.indiv(ncp.vec=0:30, K=3, nc=5, nvec=rep(100, 5), ngrid=21,
R=5, L=1)
r3
rerunOverall <- TRUE
rerunIndiv <- TRUE
# load libraries
library(multiCA)
library(ggplot2)
library(dplyr)
library(directlabels)
######################
## Stroke data example
######################
data(stroke)
# trend plot
stroke <-group_by(stroke, Year) %>% mutate(Prop = Freq / sum(Freq))
levels(stroke$Type) <- LETTERS[1:5]
strk.pl <- ggplot(stroke, aes(x=Year, y=Prop, linetype=Type, label=Type, group=Type)) +
geom_line() + geom_dl(method=list("last.qp")) +
scale_linetype_discrete(guide="none") +
scale_x_continuous(limits=c(2003,2011), breaks=unique(stroke$Year)) +
scale_y_continuous("Proportion")
strk.pl
strk.pl <- ggplot(stroke, aes(x=Year, y=Prop, linetype=Type, label=Type, group=Type)) +
geom_line() + geom_dl(method=list("last.qp")) +
scale_linetype_discrete(guide="none") +
scale_x_continuous(limits=c(2003,2011), breaks=unique(stroke$Year)) +
scale_y_continuous("Proportion of given etiology") + theme_bw()
strk.pl
?geom_dl
strk.pl <- ggplot(stroke, aes(x=Year, y=Prop, linetype=Type, label=Type, group=Type)) +
geom_line() + geom_dl(method=list("last.qp", hjust=1)) +
scale_linetype_discrete(guide="none") +
scale_x_continuous(limits=c(2003,2011), breaks=unique(stroke$Year)) +
scale_y_continuous("Proportion of given etiology") + theme_bw()
strk.pl
strk.pl <- ggplot(stroke, aes(x=Year, y=Prop, linetype=Type, label=Type, group=Type)) +
geom_line() + geom_dl(method=list("last.qp", hjust=0)) +
scale_linetype_discrete(guide="none") +
scale_x_continuous(limits=c(2003,2011), breaks=unique(stroke$Year)) +
scale_y_continuous("Proportion of given etiology") + theme_bw()
strk.pl
strk.pl <- ggplot(stroke, aes(x=Year, y=Prop, linetype=Type, label=Type, group=Type)) +
geom_line() + geom_dl(method=list("last.qp", hjust=-1)) +
scale_linetype_discrete(guide="none") +
scale_x_continuous(limits=c(2003,2011), breaks=unique(stroke$Year)) +
scale_y_continuous("Proportion of given etiology") + theme_bw()
strk.pl
strk.pl <- ggplot(stroke, aes(x=Year, y=Prop, linetype=Type, label=Type, group=Type)) +
geom_line() + geom_dl(method=list("last.qp", hjust=-0.5)) +
scale_linetype_discrete(guide="none") +
scale_x_continuous(limits=c(2003,2011), breaks=unique(stroke$Year)) +
scale_y_continuous("Proportion of given etiology") + theme_bw()
strk.pl
setwd("Z:/EOGeorge/MultiTrend")
theme_set(theme_bw(base_size = 12))
(strk.pl <- ggplot(stroke, aes(x=Year, y=Prop, linetype=Type, label=Type, group=Type)) +
geom_line() + geom_dl(method=list("last.qp", hjust=-0.5)) +
scale_linetype_discrete(guide="none") +
scale_x_continuous(limits=c(2003,2011), breaks=unique(stroke$Year)) +
scale_y_continuous("Proportion of given etiology")
pdf(file="Results/StrokeTrend.pdf", width=8, height=5)
strk.pl
dev.off()
(strk.pl <- ggplot(stroke, aes(x=Year, y=Prop, linetype=Type, label=Type, group=Type)) +
geom_line() + geom_dl(method=list("last.qp", hjust=-0.5)) +
scale_linetype_discrete(guide="none") +
scale_x_continuous(limits=c(2003,2011), breaks=unique(stroke$Year)) +
scale_y_continuous("Proportion of given etiology"))
pdf(file="Results/StrokeTrend.pdf", width=8, height=5)
strk.pl
dev.off()
getwd()
strk.pl
pdf(file="Results/StrokeTrend.pdf", width=8, height=5)
strk.pl
dev.off()
multiCA.test(Type ~ Year, data=stroke, weights=Freq)
# various multiple testing adjustment
p.unadj <- multiCA.test(Type ~ Year, data=stroke, weights=Freq,
p.adjust.method="none")$individual
p.closed.set <- multiCA.test(Type ~ Year, data=stroke, weights=Freq,
p.adjust.method="closed.set")$individual
p.holm.shaffer <- multiCA.test(Type ~ Year, data=stroke, weights=Freq,
p.adjust.method="Holm-Shaffer")$individual
cbind(p.unadj, p.closed.set, p.holm.shaffer)
library(devtools)
source('c:/RForge/Nuweb.R')
mc <- as.package("c:/RForge/multiCA")
check(mc, cleanup = FALSE, check_dir = "c:/RForge", check_version = TRUE, cran = TRUE)
install(mc)
multiCA.test(Type ~ Year, data=stroke, weights=Freq)
# various multiple testing adjustment
p.unadj <- multiCA.test(Type ~ Year, data=stroke, weights=Freq,
p.adjust.method="none")$individual
p.closed.set <- multiCA.test(Type ~ Year, data=stroke, weights=Freq,
p.adjust.method="closed.set")$individual
p.holm.shaffer <- multiCA.test(Type ~ Year, data=stroke, weights=Freq,
p.adjust.method="Holm-Shaffer")$individual
cbind(p.unadj, p.closed.set, p.holm.shaffer)
source("SimMultiSlope.R")
gen.data <- function(nvec, pmat){
#generate counts, conditional on group sizes nvec
res <- sapply(seq_along(nvec), function(i){
rmultinom(1, size=nvec[i], prob=pmat[,i])})
rownames(res) <- 1:nrow(res)
res
}
simulate.test <- function(nvec, pmat, sig.level=0.05){
x <- gen.data(nvec=nvec, pmat=pmat)
xres <- multiCA.test(x)$overall
pval <- xres$p.value
res <- (pval <= sig.level)
invisible(list(result=res, p.values=pval))
}
# generate a new random matrix for every simulation
# all combinations of ncp and per-group sample size
sim.set <- function(ncp.vec, ss.vec, K, nc, R=1000, ngrid=21, maxit=100) {
simone <-  function(ncp, n){
nvec <- rep(n, nc)
testp <- ran.pmatrix.ncp(ncp=ncp, K=K, nc=nc, nvec=nvec, ngrid=ngrid,
maxit=maxit)
sig <- simulate.test(nvec=nvec, pmat=testp)$res
calcpwr <- power.multiCA.test(N=sum(nvec), pmatrix=testp)$power
c(ncp, n, calcpwr, sig)
}
simmany <- function(ncp, n){
tmp <- replicate(R, tryCatch(simone(ncp, n), error=function(e)c(ncp,n,NA,NA)))
rowMeans(tmp, na.rm=TRUE)
}
res <- mapply(simmany, rep(ncp.vec, each=length(ss.vec)), rep(ss.vec, length(ncp.vec)))
resd <- as.data.frame(t(res))
names(resd) <- c("ncp", "n", "power.calc", "power")
resd$K <- K
resd <- transform(resd, se = sqrt(power * (1-power)/R))
resd
}
# ncp values to achieve power from 0.05 to 0.95
target.pwr <- seq(0.05, 0.95, by=0.05)
target.K <- 3
target.ncp3 <- sapply(target.pwr,
function(pw) cnonct(x = qchisq(0.05, df=target.K-1, lower=FALSE),
p = 1-pw,
df = target.K-1))
target.K <- 5
target.ncp5 <- sapply(target.pwr,
function(pw) cnonct(x = qchisq(0.05, df=target.K-1, lower=FALSE),
p = 1-pw,
df = target.K-1))
target.K <- 7
target.ncp7 <- sapply(target.pwr,
function(pw) cnonct(x = qchisq(0.05, df=target.K-1, lower=FALSE),
p = 1-pw,
df = target.K-1))
if (rerunOverall){
set.seed(346236)
# under the null hypothesis
s3a <- sim.set(ncp.vec=0, ss.vec=seq(10, 100, by=5), K=3, nc=5, ngrid=21, R=5000)
s5a <- sim.set(ncp.vec=0, ss.vec=seq(10, 100, by=5), K=5, nc=5, ngrid=21, R=5000)
s7a <- sim.set(ncp.vec=0, ss.vec=seq(10, 100, by=5), K=7, nc=5, ngrid=21, R=5000)
# under the alternative hypothesis
s3b <- sim.set(ncp.vec=target.ncp3, ss.vec=c(20, 50, 100), K=3, nc=5, ngrid=21, R=5000)
s5b <- sim.set(ncp.vec=target.ncp5, ss.vec=c(20, 50, 100), K=5, nc=5, ngrid=21, R=5000)
s7b <- sim.set(ncp.vec=target.ncp7, ss.vec=c(20, 50, 100), K=7, nc=5, ngrid=21, R=5000)
simres.a <- rbind(s3a, s5a, s7a)
simres.b <- rbind(s3b, s5b, s7b)
save(simres.a, simres.b, file="Results/SimOverall.RData")
} else {
load(file="Results/SimOverall.RData")
}
ggplot(simres.a, aes(x=n, y=power))  + facet_grid(~K, labeller = label_both)  +
geom_pointrange(aes(ymin=power-1.96*se, ymax=power+1.96*se)) +
geom_hline(yintercept=0.05, slope=0, colour="red") +
scale_y_continuous("Type I error", limits=c(0, 0.07),expand=c(0,0)) +
scale_x_continuous("Sample size per group")
ggplot(simres.a, aes(x=n, y=power))  + facet_grid(~K, labeller = label_both)  +
geom_pointrange(aes(ymin=power-1.96*se, ymax=power+1.96*se)) +
geom_hline(yintercept=0.05, colour="red") +
scale_y_continuous("Type I error", limits=c(0, 0.07),expand=c(0,0)) +
scale_x_continuous("Sample size per group")
ggplot(simres.b, aes(x=power.calc, y=power-power.calc)) +
facet_grid(n~K, labeller = label_both) +
geom_pointrange(aes(ymin=power-1.96*se, ymax=power+1.96*se)) +
geom_line(aes(y=power.calc), colour="red") +
scale_y_continuous("Bias", limits=c(0, 1)) +
scale_x_continuous("Target power")
ggplot(simres.b, aes(x=power.calc, y=power-power.calc)) +
facet_grid(n~K, labeller = label_both) +
geom_pointrange(aes(ymin=power-power.calc-1.96*se, ymax=power-power.calc+1.96*se)) +
geom_abline(slope=0, intercept=0, colour="red") +
scale_y_continuous("Bias") +
scale_x_continuous("Target power")
pdf(file="Results/TypeISim.pdf", width=8, height=4)
ggplot(simres.a, aes(x=n, y=power))  + facet_grid(~K, labeller = label_both)  +
geom_pointrange(aes(ymin=power-1.96*se, ymax=power+1.96*se)) +
geom_hline(yintercept=0.05, colour="red") +
scale_y_continuous("Type I error", limits=c(0, 0.07),expand=c(0,0)) +
scale_x_continuous("Sample size per group")
dev.off()
pdf(file="Results/PowerSim.pdf", width=10, height=8)
ggplot(simres.b, aes(x=power.calc, y=power-power.calc)) +
facet_grid(n~K, labeller = label_both) +
geom_pointrange(aes(ymin=power-power.calc-1.96*se, ymax=power-power.calc+1.96*se)) +
geom_abline(slope=0, intercept=0, colour="red") +
scale_y_continuous("Bias") +
scale_x_continuous("Target power")
dev.off()
simulate.test.indiv <- function(nvec, pmat, H0s, sig.level=0.05,
adj.method1 = "Holm-Shaffer",
adj.method2 = "closed.set"){
x <- gen.data(nvec=nvec, pmat=pmat)
xres1 <- multiCA.test(x, p.adjust.method = adj.method1)$individual
xres2 <- multiCA.test(x, p.adjust.method = adj.method2)$individual
n1 <- sum(xres1[-H0s] <= sig.level)
n2 <- sum(xres2[-H0s] <= sig.level)
nsig <- c(n1, n2)
diff21 <- n2 - n1
H0sig <- c(any(xres1[H0s] <= sig.level), any(xres2[H0s] <= sig.level))
c(H0sig, nsig, diff21)
}
# generate matrices with given ncp and L constant rows
# generate new random matrix for every data set
sim.set.indiv <- function(ncp.vec, K, L, nc, nvec, R=1000, ngrid=21, maxit=100, overall.ncp=TRUE) {
simone <- function(ncp){
testp <- ran.pmatrix0.ncp(ncp=ncp, K=K, nc=nc, nvec=nvec, L=L, ngrid=ngrid,
maxit=maxit, overall.ncp=overall.ncp)
p.alt.sum <- sum(testp[(L+1):K, 1])
ncp0 <- ncp * p.alt.sum
r <- simulate.test.indiv(nvec=nvec, pmat=testp, H0s=1:L)
c(ncp, ncp0, r)
}
simmany <- function(ncp){
tmp <- replicate(R, tryCatch(simone(ncp), error=function(e)c(ncp, rep(NA,6))))
avetmp <- rowMeans(tmp, na.rm=TRUE)
avetmp[8] <- sd(tmp[7,])/sqrt(R)  # se21 = sd(diff21)/sqrt(n)
avetmp
}
res <- sapply(ncp.vec, function(ncp){simmany(ncp)})
resd <- as.data.frame( t(res))
names(resd) <- c("ncp","ncp0", "H0sig1", "H0sig2","nsig1", "nsig2", "diff21", "se21")
resd$K <- K
resd$L <- L
resd
}
if (rerunIndiv){
set.seed(346236)
r3 <- sim.set.indiv(ncp.vec=0:30, K=3, nc=5, nvec=rep(100, 5), ngrid=21,
R=5000, L=1)
r5 <- lapply(1:3, function(L){
sim.set.indiv(ncp.vec=0:30, K=5, nc=5, nvec=rep(100, 5), ngrid=21,
R=5000, L=L)})
r7 <- lapply(1:5, function(L){
sim.set.indiv(ncp.vec=0:30, K=7, nc=5, nvec=rep(100, 5), ngrid=21,
R=5000, L=L)})
rres <- do.call(rbind, c(list(r3), r5, r7))
save(rres, file="Results/SimIndividual.RData")
} else {
load(file="Results/SimIndividual.RData")
}
pdf(file="Results/IndivPowerSim.pdf", width=8, height=5)
ggplot(rres, aes(x=ncp, y=diff21, linetype=factor(K-L), shape=factor(K-L))) +
geom_hline(yintercept=0) +
geom_ribbon(aes(ymin=diff21-1.96*se21, ymax=diff21+1.96*se21), colour=NA, alpha=0.2,
show.legend=FALSE)+
geom_line() +
geom_point() +
facet_grid(~K, labeller = label_both) +
scale_x_continuous("Non-centrality parameter") +
scale_y_continuous("#sig [closed] - #sig [Holm-Shaffer]") +
scale_linetype_discrete("# of false hypotheses") +
scale_shape_discrete("# of false hypotheses", solid=FALSE) +
theme(legend.position="bottom")
dev.off()
ggplot(rres, aes(x=ncp, y=diff21, linetype=factor(K-L), shape=factor(K-L))) +
geom_hline(yintercept=0) +
geom_ribbon(aes(ymin=diff21-1.96*se21, ymax=diff21+1.96*se21), colour=NA, alpha=0.2,
show.legend=FALSE)+
geom_line() +
geom_point() +
facet_grid(~K, labeller = label_both) +
scale_x_continuous("Non-centrality parameter") +
scale_y_continuous("#sig [closed] - #sig [Holm-Shaffer]") +
scale_linetype_discrete("# of false hypotheses") +
scale_shape_discrete("# of false hypotheses", solid=FALSE) +
theme(legend.position="bottom")
rres2 <- melt(rres, id.var=c("K","L", "ncp","ncp0"), measure.vars = c("H0sig1", "H0sig2"))
rres2 <- transform(rres2, Method=ifelse(variable=="H0sig1", "Holm-Shaffer", "Closed set"))
pdf(file="Results/IndivTypeISim.pdf", width=8, height=4)
ggplot(rres2, aes(x=ncp, y=value,, linetype=factor(K-L), shape=factor(K-L))) +
geom_hline(yintercept=0.05) +
geom_ribbon(aes(ymin=value-sqrt(value*(1-value)/5000),
ymax=value+sqrt(value*(1-value)/5000)), alpha=0.2, colour=NA,
show.legend=FALSE)+
geom_line() +
geom_point() +
facet_grid(Method~K, labeller = label_both) +
scale_x_continuous("Non-centrality parameter") +
scale_y_continuous("Familywise type I error", limit=c(0,0.075)) +
scale_linetype_discrete("# of false hypotheses") +
scale_shape_discrete("# of false hypotheses", solid=FALSE) +
theme(legend.position="bottom")
dev.off()
library(reshape2)
rres2 <- melt(rres, id.var=c("K","L", "ncp","ncp0"), measure.vars = c("H0sig1", "H0sig2"))
rres2 <- transform(rres2, Method=ifelse(variable=="H0sig1", "Holm-Shaffer", "Closed set"))
ggplot(rres2, aes(x=ncp, y=value,, linetype=factor(K-L), shape=factor(K-L))) +
geom_hline(yintercept=0.05) +
geom_ribbon(aes(ymin=value-sqrt(value*(1-value)/5000),
ymax=value+sqrt(value*(1-value)/5000)), alpha=0.2, colour=NA,
show.legend=FALSE)+
geom_line() +
geom_point() +
facet_grid(Method~K, labeller = label_both) +
scale_x_continuous("Non-centrality parameter") +
scale_y_continuous("Familywise type I error", limit=c(0,0.075)) +
scale_linetype_discrete("# of false hypotheses") +
scale_shape_discrete("# of false hypotheses", solid=FALSE) +
theme(legend.position="bottom")
pdf(file="Results/IndivTypeISim.pdf", width=8, height=4)
ggplot(rres2, aes(x=ncp, y=value,, linetype=factor(K-L), shape=factor(K-L))) +
geom_hline(yintercept=0.05) +
geom_ribbon(aes(ymin=value-sqrt(value*(1-value)/5000),
ymax=value+sqrt(value*(1-value)/5000)), alpha=0.2, colour=NA,
show.legend=FALSE)+
geom_line() +
geom_point() +
facet_grid(Method~K, labeller = label_both) +
scale_x_continuous("Non-centrality parameter") +
scale_y_continuous("Familywise type I error", limit=c(0,0.075)) +
scale_linetype_discrete("# of false hypotheses") +
scale_shape_discrete("# of false hypotheses", solid=FALSE) +
theme(legend.position="bottom")
dev.off()
rerunOverall <- TRUE
pdf(file="IndivTypeISim.pdf", width=8, height=5)
ggplot(rres2, aes(x=ncp, y=value,, linetype=factor(K-L), shape=factor(K-L))) +
geom_hline(yintercept=0.05, colour="red") +
geom_ribbon(aes(ymin=value-sqrt(value*(1-value)/5000),
ymax=value+sqrt(value*(1-value)/5000)), alpha=0.2, colour=NA,
show.legend=FALSE)+
geom_line() +
geom_point() +
facet_grid(Method~K, labeller = label_both) +
scale_x_continuous("Non-centrality parameter") +
scale_y_continuous("Familywise type I error", limit=c(0,0.075)) +
scale_linetype_discrete("# of false hypotheses") +
scale_shape_discrete("# of false hypotheses", solid=FALSE) +
theme(legend.position="bottom")
dev.off()
pdf(file="IndivTypeISim.pdf", width=8, height=6)
ggplot(rres2, aes(x=ncp, y=value,, linetype=factor(K-L), shape=factor(K-L))) +
geom_hline(yintercept=0.05, colour="red") +
geom_ribbon(aes(ymin=value-sqrt(value*(1-value)/5000),
ymax=value+sqrt(value*(1-value)/5000)), alpha=0.2, colour=NA,
show.legend=FALSE)+
geom_line() +
geom_point() +
facet_grid(Method~K, labeller = label_both) +
scale_x_continuous("Non-centrality parameter") +
scale_y_continuous("Familywise type I error", limit=c(0,0.075)) +
scale_linetype_discrete("# of false hypotheses") +
scale_shape_discrete("# of false hypotheses", solid=FALSE) +
theme(legend.position="bottom")
dev.off()
setwd("Z:/EOGeorge/MultiTrend/TAS")
pdf(file="IndivTypeISim.pdf", width=8, height=5)
ggplot(rres2, aes(x=ncp, y=value,, linetype=factor(K-L), shape=factor(K-L))) +
geom_hline(yintercept=0.05, colour="red") +
geom_ribbon(aes(ymin=value-sqrt(value*(1-value)/5000),
ymax=value+sqrt(value*(1-value)/5000)), alpha=0.2, colour=NA,
show.legend=FALSE)+
geom_line() +
geom_point() +
facet_grid(Method~K, labeller = label_both) +
scale_x_continuous("Non-centrality parameter") +
scale_y_continuous("Familywise type I error", limit=c(0,0.075)) +
scale_linetype_discrete("# of false hypotheses") +
scale_shape_discrete("# of false hypotheses", solid=FALSE) +
theme(legend.position="bottom")
dev.off()
pdf(file="IndivPowerSim.pdf", width=8, height=5)
ggplot(rres, aes(x=ncp, y=diff21, linetype=factor(K-L), shape=factor(K-L))) +
geom_hline(yintercept=0, color="red") +
geom_ribbon(aes(ymin=diff21-1.96*se21, ymax=diff21+1.96*se21), colour=NA, alpha=0.2,
show.legend=FALSE)+
geom_line() +
geom_point() +
facet_grid(~K, labeller = label_both) +
scale_x_continuous("Non-centrality parameter") +
scale_y_continuous("#sig [closed] - #sig [Holm-Shaffer]") +
scale_linetype_discrete("# of false hypotheses") +
scale_shape_discrete("# of false hypotheses", solid=FALSE) +
theme(legend.position="bottom")
dev.off()
